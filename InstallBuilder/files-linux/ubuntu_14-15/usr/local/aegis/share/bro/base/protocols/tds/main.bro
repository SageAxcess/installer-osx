##! Implements base functionality for TDS analysis.
##! Generates the Tds.log file.

# Generated by binpac_quickstart

#@load base/frameworks/logging/writers/zmq

module Tds;

export {
	redef enum Log::ID += { LOG, Z_LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
                 
		user:   string &log &default="<unknown>";
		database:	string &log &optional &default="";
		app:	string &log &optional &default="";
		sql:	string &log  &default="";

		local_user:   string &log &default="";
		process:   string &log &default="";
	};

	## Event that can be handled to access the TDS record as it is sent on
	## to the loggin framework.
	global log_tds: event(rec: Info);
}

const ports = { 1433/tcp };

redef record connection += {
	tds: Tds::Info &optional;
};

redef record LogZMQ::Info += {
	tds: Info &log &optional;
};

function write_log(info: Info)
	{
        Log::write(Tds::LOG, info);

#	when ( local src_host = lookup_addr(info$id$orig_h) )
#		{
		local s: LogZMQ::Info = [$ptype="tds", $is_proto=T, $ts=info$ts, $uid=info$uid, $username=info$local_user, $process=info$process];

		s$tds = info;

		Log::write(Tds::Z_LOG, s);
#		}
	}

event bro_init() &priority=5
	{
	Log::create_stream(Tds::LOG, [$columns=Info, $ev=log_tds, $path="tds"]);

	Log::create_stream(Tds::Z_LOG, [$columns=LogZMQ::Info, $path="z-tds"]);
        Log::remove_default_filter(Tds::Z_LOG);
	local filter: Log::Filter = [$name="zmq", $writer=Log::WRITER_ZMQ];
	Log::add_filter(Tds::Z_LOG, filter);

	Analyzer::register_for_ports(Analyzer::ANALYZER_TDS, ports);
	}

#event tds_event(c: connection)
#	{
#	local info: Info;
#	info$ts  = network_time();
#	info$uid = c$uid;
#	info$id  = c$id;
#	info$sql = "debug message";	

#	Log::write(Tds::LOG, info);
#	}

event tds_login(c: connection, host: string, user: string, pass: string, app: string, database: string)
	{
		if ( ! c?$tds )
		{
		        if( !c?$conn ) {
		            local x: Conn::Info;
	        	    c$conn = x;
		        }
			c$conn$service="tds";

			local s: Info;
			c$tds = s;

			c$tds$local_user=c?$local_user ? c$local_user : "";
			c$tds$process=c?$process ? c$process : "";
		}

		c$tds$user = user;
		c$tds$database = database;
		c$tds$app = app;
	}

event tds_batch(c: connection, sql: string)
	{
		if ( ! c?$tds )
		{
		        if( !c?$conn ) {
		            local x: Conn::Info;
	        	    c$conn = x;
		        }
			c$conn$service="tds";

			local s: Info;
			c$tds = s;

			c$tds$local_user=c?$local_user ? c$local_user : "";
			c$tds$process=c?$process ? c$process : "";
		}

		c$tds$ts  = network_time();
		c$tds$uid = c$uid;
		c$tds$id  = c$id;
		c$tds$sql = sql;

		write_log(c$tds);
	}

event tds_rpc(c: connection, procname: string)
	{
		if ( ! c?$tds )
		{
		        if( !c?$conn ) {
		            local x: Conn::Info;
	        	    c$conn = x;
		        }
			c$conn$service="tds";

			local s: Info;
			c$tds = s;

			c$tds$local_user=c?$local_user ? c$local_user : "";
			c$tds$process=c?$process ? c$process : "";
		}

		c$tds$ts  = network_time();
		c$tds$uid = c$uid;
		c$tds$id  = c$id;
		c$tds$sql = procname;

		write_log(c$tds);
	}